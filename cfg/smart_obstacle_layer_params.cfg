#!/usr/bin/env python
PACKAGE = "scitos_2d_navigation"

from dynamic_reconfigure.parameter_generator_catkin import *

# load default values from yaml file
import yaml
import os
path = os.path.dirname(os.path.abspath(__file__))   # hack for getting the current dir

with open((path + '/../scitos_move_base_params/costmap_common_params.yaml'), 'r') as yamlFile:
    d = yaml.load(yamlFile)
    
    # get flags
    def_only_current_measurements = d['smart_obstacle_layer']['only_current_measurements']

gen = ParameterGenerator()




gen.add("enabled", bool_t, 0, "Whether to apply this plugin or not", True)
gen.add("max_obstacle_height", double_t, 0, "The maximum height of any obstacle to be inserted into the costmap in meters.", 2, 0, 50)

combo_enum = gen.enum([ gen.const("Overwrite", int_t, 0, "b"),
                        gen.const("Maximum", int_t, 1, "a") ],
                      "Method for combining layers enum")

gen.add("combination_method", int_t, 0, "Method for combining two layers", 1, 0, 2, edit_method=combo_enum)

gen.add("only_current_measurements", bool_t, 0, "Only track current measurements and do not keep track of old ones", def_only_current_measurements)


#gen.add("max_obstacle_range", double_t, 0, "The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters.", 2.5, 0, 50)
#gen.add("raytrace_range", double_t, 0, "The default range in meters at which to raytrace out obstacles from the map using sensor data.", 3, 0, 50)
exit(gen.generate(PACKAGE, "scitos_2d_navigation", "smart_obstacle_layer_params"))
